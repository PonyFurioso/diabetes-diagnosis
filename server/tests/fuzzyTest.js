const nools = require('nools');

const { Trapezoid, Triangle } = require('../utils/Shapes');

/* let triangle = new Triangle(450, 550, 700, 0);
let trapezoid = new Trapezoid(-20, -10, -5, 0);  */

// function fuzzy(valorPeso, valorGluPre, valorGluCap Diagnostico = ";}";
// i, valorGluPost, valorHemoGli) { }

// Variables if(object.""; > 0) {Diagnostico = ";}";

// Arreglo donde se mostraran las reglas seleccionadas del difuso
let activadas = [];

// Arreglos donde se guardaran los datos de las graficas
let peso = [];
let glucoPre = [];
let glucoPost = [];
let glucoCapi = [];
let hemoGli = [];

// Se crean las figuras y se guardan en los arreglos
glucoPre.push(new Trapezoid(0, 50, 80, 100), new Trapezoid(80, 100, 125, 140), new Trapezoid(125, 140, 400, 500));
glucoCapi.push(new Trapezoid(0, 50, 180, 200), new Trapezoid(180, 200, 250, 260), new Trapezoid(250, 260, 400, 500));
glucoPost.push(new Trapezoid(0, 50, 140, 150), new Trapezoid(140, 150, 200, 210), new Trapezoid(200, 210, 400, 500));
hemoGli.push(new Trapezoid(-10, 0, 5.5, 5.6), new Trapezoid(5.5, 5.6, 6, 6.4), new Trapezoid(6, 6.4, 8.5, 10));
peso.push(new Trapezoid(-10, 0, 25, 30), new Trapezoid(25, 30, 45, 50), new Trapezoid(45, 50, 80, 100));

//Con este objeto se procesaran las reglas del sistema difuso y sobre el mismo se guardaran los valores difusos
// let object = {

//     "glucoPreNormal": "Normal",
//     "glucoPrePrediabetes": "Prediabetes",
//     "glucoPreDiabetes": "Diabetes",
//     "glucoCapiNormal": "Normal",
//     "glucoCapiPrediabetes": "Prediabetes",
//     "glucoCapiDiabetes": "Diabetes",
//     "glucoPostNormal": "Normal",
//     "glucoPostPrediabetes": "Prediabetes",
//     "glucoPostDiabetes": "Diabetes",
//     "hemoGliNormal": "Normal",
//     "hemoGliPrediabetes": "Prediabetes",
//     "hemoGliDiabetes": "Diabetes",
//     "pesoNormal": "Normal",
//     "pesoPrediabetes": "Prediabetes",
//     "pesoDiabetes": "Diabetes",
//     "preNormal": valoresPre[0],
//     "prePrediabetes": valoresPre[1],
//     "preDiabetes": valoresPre[2],
//     "capiNormal": valoresCapi[0],
//     "capiPrediabetes": valoresCapi[1],
//     "capiDiabetes": valoresCapi[2],
//     "postNormal": valoresPost[0],
//     "postPrediabetes": valoresPost[1],
//     "postDiabetes": valoresPost[2],
//     "gliNormal": valoresHemo[0],
//     "gliPrediabetes": valoresHemo[1],
//     "gliDiabetes": valoresHemo[2],
//     "pNormal": valorPeso[0],
//     "pPrediabetes": valorPeso[1],
//     "pDiabetes": valorPeso[2]
// }

let object = {
    Normal: 0,
    Propenso: 0,
    PreDiabetes: 0,
    Diabetes: 0
};

// El objecto anterior se pasa al formato recibido por la libreria que ejecutara las reglas
var Values = function (glucoPreNormal, glucoPrePrediabetes, glucoPreDiabetes, glucoCapiNormal, glucoCapiPrediabetes, glucoCapiDiabetes, glucoPostNormal, glucoPostPrediabetes, glucoPostDiabetes, hemoGliNormal, hemoGliPrediabetes, hemoGliDiabetes, pesoNormal, pesoPrediabetes, pesoDiabetes, preNormal, prePrediabetes, preDiabetes, capiNormal, capiPrediabetes, capiDiabetes, postNormal, postPrediabetes, postDiabetes, gliNormal, gliPrediabetes, gliDiabetes, pNormal, pPrediabetes, pDiabetes) {
    this.glucoPreNormal = glucoPreNormal;
    this.glucoPrePrediabetes = glucoPrePrediabetes;
    this.glucoPreDiabetes = glucoPreDiabetes;
    this.glucoCapiNormal = glucoCapiNormal;
    this.glucoCapiPrediabetes = glucoCapiPrediabetes;
    this.glucoCapiDiabetes = glucoCapiDiabetes;
    this.glucoPostNormal = glucoPostNormal;
    this.glucoPostPrediabetes = glucoPostPrediabetes;
    this.glucoPostDiabetes = glucoPostDiabetes;
    this.hemoGliNormal = hemoGliNormal;
    this.hemoGliPrediabetes = hemoGliPrediabetes;
    this.hemoGliDiabetes = hemoGliDiabetes;
    this.pesoNormal = pesoNormal;
    this.pesoPrediabetes = pesoPrediabetes;
    this.pesoDiabetes = pesoDiabetes;
    this.preNormal = preNormal;
    this.prePrediabetes = prePrediabetes;
    this.preDiabetes = preDiabetes;
    this.capiNormal = capiNormal;
    this.capiPrediabetes = capiPrediabetes;
    this.capiDiabetes = capiDiabetes;
    this.postNormal = postNormal;
    this.postPrediabetes = postPrediabetes;
    this.postDiabetes = postDiabetes;
    this.gliNormal = gliNormal;
    this.gliPrediabetes = gliPrediabetes;
    this.gliDiabetes = gliDiabetes;
    this.pNormal = pNormal;
    this.pPrediabetes = pPrediabetes;
    this.pDiabetes = pDiabetes;
}

function convert(object) {

    // Arreglos donde se guardaran los valores desfuzificados
    let valoresPeso = [];
    let valoresPre = [];
    let valoresPost = [];
    let valoresCapi = [];
    let valoresHemo = [];

    for (const valor of glucoPre) {
        valoresPre.push(valor.fuzzify(object.preprandial_glucose));
    }
    for (const valor of glucoCapi) {
        valoresCapi.push(valor.fuzzify(object.capillar_glucose));
    }
    for (const valor of glucoPost) {
        valoresPost.push(valor.fuzzify(object.postprandial_glucose));
    }
    for (const valor of hemoGli) {
        valoresHemo.push(valor.fuzzify(object.glycosylated_hemoglobin));
    }
    for (const valor of peso) {
        valoresPeso.push(valor.fuzzify(object.peso));
    }

    let object2 = {

        "glucoPreNormal": "Normal",
        "glucoPrePrediabetes": "Prediabetes",
        "glucoPreDiabetes": "Diabetes",
        "glucoCapiNormal": "Normal",
        "glucoCapiPrediabetes": "Prediabetes",
        "glucoCapiDiabetes": "Diabetes",
        "glucoPostNormal": "Normal",
        "glucoPostPrediabetes": "Prediabetes",
        "glucoPostDiabetes": "Diabetes",
        "hemoGliNormal": "Normal",
        "hemoGliPrediabetes": "Prediabetes",
        "hemoGliDiabetes": "Diabetes",
        "pesoNormal": "Normal",
        "pesoPrediabetes": "Prediabetes",
        "pesoDiabetes": "Diabetes",
        "preNormal": valoresPre[0],
        "prePrediabetes": valoresPre[1],
        "preDiabetes": valoresPre[2],
        "capiNormal": valoresCapi[0],
        "capiPrediabetes": valoresCapi[1],
        "capiDiabetes": valoresCapi[2],
        "postNormal": valoresPost[0],
        "postPrediabetes": valoresPost[1],
        "postDiabetes": valoresPost[2],
        "gliNormal": valoresHemo[0],
        "gliPrediabetes": valoresHemo[1],
        "gliDiabetes": valoresHemo[2],
        "pNormal": valoresPeso[0],
        "pPrediabetes": valoresPeso[1],
        "pDiabetes": valoresPeso[2]
    }

    let values = new Values(object2.glucoPreNormal, object2.glucoPrePrediabetes, object2.glucoPreDiabetes, object2.glucoCapiNormal, object2.glucoCapiPrediabetes, object2.glucoCapiDiabetes, object2.glucoPostNormal, object2.glucoPostPrediabetes, object2.glucoPostDiabetes, object2.hemoGliNormal, object2.hemoGliPrediabetes, object2.hemoGliDiabetes, object2.pesoNormal, object2.pesoPrediabetes, object2.pesoDiabetes, object2.preNormal, object2.prePrediabetes, object2.preDiabetes, object2.capiNormal, object2.capiPrediabetes, object2.capiDiabetes, object2.postNormal, object2.postPrediabetes, object2.postDiabetes, object2.gliNormal, object2.gliPrediabetes, object2.gliDiabetes, object2.pNormal, object2.pPrediabetes, object2.pDiabetes);

    return values;
}

// Glucosa prenpandial Normal, Glucosa Capilar Normal, glucosa postpandial Normal, hemoglobina glicocilada y peso SE normal

// Se crea la instancia del objeto Json pero ya con la notacion de la libreria de las reglas
// let values = new Values(object.glucoPreNormal, object.glucoPrePrediabetes, object.glucoPreDiabetes, object.glucoCapiNormal, object.glucoCapiPrediabetes, object.glucoCapiDiabetes, object.glucoPostNormal, object.glucoPostPrediabetes, object.glucoPostDiabetes, object.hemoGliNormal, object.hemoGliPrediabetes, object.hemoGliDiabetes, object.pesoNormal, object.pesoPrediabetes, object.pesoDiabetes, object.preNormal, object.prePrediabetes, object.preDiabetes, object.capiNormal, object.capiPrediabetes, object.capiDiabetes, object.postNormal, object.postPrediabetes, object.postDiabetes, object.gliNormal, object.gliPrediabetes, object.gliDiabetes, object.pNormal, object.pPrediabetes, object.pDiabetes);

// Se crean todas las reglas que tengra el sistema difuso que sera en total 243 reglas.
var flow = nools.flow("DiagnosisFuzzy", function (flow) {
    flow.rule("Rule1", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule1", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule1", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule2", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule2", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule2", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Normal";}} );
    flow.rule("Rule3", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule3", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule3", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule4", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule4", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule4", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule5", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule5", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule5", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Normal";}} );
    flow.rule("Rule6", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule6", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule6", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule7", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule7", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule7", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule8", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule8", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule8", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule9", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule9", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule9", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule10", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule10", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule10", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule11", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule11", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule11", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Normal";}} );
    flow.rule("Rule12", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule12", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule12", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule13", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule13", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule13", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule14", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule14", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule14", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule15", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule15", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule15", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule16", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule16", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule16", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule17", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule17", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule17", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule18", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule18", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule18", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule19", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule19", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule19", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule20", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule20", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule20", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule21", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule21", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule21", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule22", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule22", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule22", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule23", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule23", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule23", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule24", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule24", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule24", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule25", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule25", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule25", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule26", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule26", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule26", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule27", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule27", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule27", descripcion: "glucosa preprandial Normal, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule28", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule28", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule28", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule29", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule29", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule29", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule30", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule30", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule30", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule31", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule31", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule31", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule32", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule32", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule32", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule33", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule33", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule33", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule34", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule34", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule34", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule35", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule35", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule35", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule36", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule36", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule36", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule37", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule37", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule37", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule38", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule38", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule38", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule39", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule39", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule39", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule40", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule40", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule40", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule41", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule41", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule41", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule42", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule42", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule42", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule43", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule43", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule43", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule44", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule44", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule44", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule45", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule45", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule45", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule46", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule46", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule46", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule47", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule47", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule47", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule48", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule48", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule48", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule49", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule49", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule49", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule50", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule50", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule50", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule51", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule51", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule51", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule52", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule52", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule52", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule53", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule53", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule53", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule54", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule54", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule54", descripcion: "glucosa preprandial Normal, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule55", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule55", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule55", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}});
    flow.rule("Rule56", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule56", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule56", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule57", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule57", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule57", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule58", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule58", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule58", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule59", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule59", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule59", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule60", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule60", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule60", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule61", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule61", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule61", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule62", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule62", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule62", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule63", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule63", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule63", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule64", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule64", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule64", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule65", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule65", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule65", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule66", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule66", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule66", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule67", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule67", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule67", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule68", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule68", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule68", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule69", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule69", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule69", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule70", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule70", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule70", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule71", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule71", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule71", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule72", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule72", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule72", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule73", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule73", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule73", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule74", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule74", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule74", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule75", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule75", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule75", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule76", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule76", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule76", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule77", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule77", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule77", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule78", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule78", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule78", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule79", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule79", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule79", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule80", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule80", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule80", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule81", [Values, "v", "v.glucoPreNormal == 'Normal' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preNormal, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule81", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule81", descripcion: "glucosa preprandial Normal, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule82", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule82", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule82", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule83", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule83", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule83", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule84", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule84", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule84", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule85", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule85", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule85", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule86", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule86", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule86", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule87", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule87", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule87", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule88", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule88", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule88", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule89", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule89", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule89", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule90", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule90", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule90", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule91", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule91", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule91", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule92", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule92", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule92", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule93", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule93", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule93", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule94", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule94", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule94", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule95", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule95", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule95", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule96", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule96", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule96", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule97", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule97", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule97", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule98", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule98", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule98", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule99", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule99", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule99", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule100", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule100", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule100", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule101", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule101", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule101", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule102", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule102", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule102", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule103", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule103", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule103", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule104", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule104", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule104", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule105", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule105", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule105", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule106", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule106", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule106", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule107", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule107", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule107", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule108", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule108", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule108", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule109", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule109", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule109", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule110", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule110", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule110", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule111", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule111", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule111", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule112", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule112", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule112", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule113", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule113", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule113", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule114", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule114", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule114", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule115", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule115", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule115", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule116", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule116", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule116", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule117", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule117", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule117", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule118", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule118", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule118", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule119", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule119", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule119", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule120", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule120", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule120", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule121", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule121", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule121", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule122", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule122", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule122", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule123", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule123", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule123", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule124", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule124", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule124", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule125", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule125", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule125", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule126", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule126", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule126", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule127", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule127", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule127", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule128", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule128", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule128", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule129", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule129", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule129", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule130", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule130", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule130", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule131", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule131", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule131", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule132", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule132", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule132", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule133", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule133", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule133", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule134", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule134", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule134", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule135", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule135", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule135", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule136", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule136", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule136", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule137", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule137", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule137", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule138", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule138", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule138", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule139", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule139", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule139", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule140", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule140", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule140", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule141", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule141", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule141", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule142", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule142", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule142", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule143", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule143", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule143", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule144", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule144", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule144", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule145", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule145", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule145", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule146", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule146", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule146", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule147", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule147", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule147", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule148", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule148", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule148", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule149", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule149", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule149", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule150", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule150", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule150", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule151", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule151", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule151", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule152", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule152", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule152", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule153", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule153", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule153", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule154", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule154", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule154", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule155", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule155", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule155", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule156", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule156", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule156", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule157", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule157", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule157", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule158", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule158", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule158", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule159", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule159", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule159", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule160", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule160", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule160", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule161", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule161", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule161", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule162", [Values, "v", "v.glucoPrePrediabetes == 'Prediabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.prePrediabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule162", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule162", descripcion: "glucosa preprandial Prediabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule163", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule163", minimo); if(!object.hasOwnProperty("Normal")) {object.Normal = minimo; Diagnostico = "Normal"} else if(minimo > object.Normal) {object.Normal = minimo; activadas.push({regla: "Rule163", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Normal";}} );
    flow.rule("Rule164", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule164", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule164", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "Propenso";} });
    flow.rule("Rule165", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule165", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule165", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule166", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule166", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule166", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule167", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule167", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule167", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule168", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule168", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule168", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule169", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule169", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule169", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule170", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule170", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule170", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule171", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule171", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule171", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule172", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule172", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule172", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule173", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule173", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule173", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule174", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule174", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule174", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule175", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule175", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule175", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule176", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule176", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule176", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule177", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule177", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule177", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule178", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule178", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule178", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule179", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule179", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule179", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule180", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule180", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule180", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule181", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule181", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule181", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule182", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule182", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule182", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule183", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule183", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule183", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule184", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule184", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule184", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule185", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule185", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule185", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule186", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule186", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule186", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule187", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule187", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule187", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule188", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule188", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule188", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule189", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiNormal == 'Normal' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiNormal, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule189", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule189", descripcion: "glucosa preprandial Diabetes, glucosa capilar Normal, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule190", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule190", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule190", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule191", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule191", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule191", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule192", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule192", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule192", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule193", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule193", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule193", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule194", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule194", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule194", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule195", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule195", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule195", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule196", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule196", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule196", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule197", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule197", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule197", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule198", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule198", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule198", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule199", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule199", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule199", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule200", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule200", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule200", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule201", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule201", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule201", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule202", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule202", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule202", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule203", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule203", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule203", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule204", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule204", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule204", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule205", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule205", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule205", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule206", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule206", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule206", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule207", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule207", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule207", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule208", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule208", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule208", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule209", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule209", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule209", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes"}});
    flow.rule("Rule210", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule210", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule210", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule211", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule211", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule211", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule212", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule212", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule212", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule213", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule213", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule213", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule214", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule214", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule214", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule215", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule215", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule215", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule216", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiPrediabetes == 'Prediabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiPrediabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule216", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule216", descripcion: "glucosa preprandial Diabetes, glucosa capilar Prediabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule217", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pNormal); console.log("Rule217", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule217", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule218", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule218", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule218", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule219", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule219", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule219", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule220", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule220", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule220", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule221", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule221", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule221", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule222", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule222", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule222", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule223", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule223", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule223", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule224", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule224", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule224", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule225", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostNormal == 'Normal' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postNormal, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule225", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule225", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Normal, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule226", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule226", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule226", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule227", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule227", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule227", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule228", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule228", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule228", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule229", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule229", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule229", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule230", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule230", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule230", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule231", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule231", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule231", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule232", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule232", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule232", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule233", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule233", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule233", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule234", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostPrediabetes == 'Prediabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postPrediabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule234", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule234", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Prediabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule235", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoNormal == 'Normal'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pNormal); console.log("Rule235", minimo); if(!object.hasOwnProperty("Propenso")) {object.Propenso = minimo; Diagnostico = "Propenso"} else if(minimo > object.Propenso) {object.Propenso = minimo; activadas.push({regla: "Rule235", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Normal" });  Diagnostico = "Propenso";} });
    flow.rule("Rule236", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pPrediabetes); console.log("Rule236", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule236", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule237", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliNormal == 'Normal' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliNormal, facts.v.pDiabetes); console.log("Rule237", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule237", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Normal, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule238", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pNormal); console.log("Rule238", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule238", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule239", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pPrediabetes); console.log("Rule239", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule239", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Prediabetes" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule240", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliPrediabetes == 'Prediabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliPrediabetes, facts.v.pDiabetes); console.log("Rule240", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule240", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Prediabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule241", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoNormal == 'Normal'"], function (facts) {var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pNormal); console.log("Rule241", minimo); if(!object.hasOwnProperty("PreDiabetes")) {object.PreDiabetes = minimo; Diagnostico = "PreDiabetes"} else if(minimo > object.PreDiabetes) {object.PreDiabetes = minimo; activadas.push({regla: "Rule241", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Normal" });  Diagnostico = "PreDiabetes";} });
    flow.rule("Rule242", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoPrediabetes == 'Prediabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pPrediabetes); console.log("Rule242", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule242", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Prediabetes" });  Diagnostico = "Diabetes";} });
    flow.rule("Rule243", [Values, "v", "v.glucoPreDiabetes == 'Diabetes' && v.glucoCapiDiabetes == 'Diabetes' && v.glucoPostDiabetes == 'Diabetes' && v.hemoGliDiabetes == 'Diabetes' && v.pesoDiabetes == 'Diabetes'"], function (facts) { var minimo = Math.min(facts.v.preDiabetes, facts.v.capiDiabetes, facts.v.postDiabetes, facts.v.gliDiabetes, facts.v.pDiabetes); console.log("Rule243", minimo); if(!object.hasOwnProperty("Diabetes")) {object.Diabetes = minimo; Diagnostico = "Diabetes"} else if(minimo > object.Diabetes) {object.Diabetes = minimo; activadas.push({regla: "Rule243", descripcion: "glucosa preprandial Diabetes, glucosa capilar Diabetes, glucosa postprandial Diabetes, hemoglobina glicosilada Diabetes, peso del sistema experto Diabetes" });  Diagnostico = "Diabetes";} });
});

var session = flow.getSession();

// let example = {
//     preprandial_glucose: 300,
//     capillar_glucose: 250,
//     postprandial_glucose: 400,
//     glycosylated_hemoglobin: 4.5,
//     peso: 36,
// }

// execute(session, example);

function execute(session, objecto, result, res) {

    let values = convert(objecto);

    session.assert(values);

    let pato;

    session.match().then(
        function () {
            //all done!
            console.log("All done!");
            let valor = centroide(object);
            //Se hace el metodo del centroide para hallar la salida del sistema difuso
            result["Valor del sistema difuso"] = valor;
            result["Reglas activadas SD"] = activadas;
            if (valor > 0 && valor <= 25) {
                Diagnostico = "Normal";
            } else if (valor > 25 && valor <= 50) {
                Diagnostico = "Propenso";
            } else if (valor > 50 && valor <= 75) {
                Diagnostico = "PreDiabetes";
            } else {
                Diagnostico = "Diabetes";
            }
            result["Diagnostico de SD"] = Diagnostico;
            console.log(valor);
            console.log(object);
            console.log(values);
            console.log(Diagnostico);
            console.log(activadas);
            session.dispose();
            session = flow.getSession();
            activadas = [];
            res.redirect('/api/diagnosis/results');
            res.status(200).json(result);
        },
        function (err) {
            console.log("Error matchUntilHalt()", err.stack);
        }
    );

    return 'Este es el peso ' + pato;
}

function centroide(object) {
    let valor = 0;

    valor = (12.5*object.Normal + 37.5*object.Propenso + 62.5 * object.PreDiabetes + 87.5 * object.Diabetes)/(object.Normal+object.Propenso+object.PreDiabetes+object.Diabetes);

    return valor;
}

module.exports = {
    flow,
    execute,
    convert,
    centroide
}




















// let velocidad = [];
// let angulo = [];

// /* console.log(triangle.fuzzify(515));
// console.log(trapezoid.fuzzify(-2.5)); */

// let rulesDataVel = [];
// let rulesDataAng = [];

// let vel = 515;
// let ang = -2.5;

// // Grafica para la velocidad
// velocidad.push(new Trapezoid(-10, 0, 450, 500));
// velocidad.push(new Triangle(450, 550, 700, 0));
// velocidad.push(new Triangle(550, 850, 1000, 1500));

// // Grafica para el angulo
// angulo.push(new Trapezoid(-20, -10, -5, 0));
// angulo.push(new Triangle(-5, 0, 5));
// angulo.push(new Trapezoid(0, 5, 10, 20));

// for (const grafica of velocidad) {
//     rulesDataVel.push(grafica.fuzzify(vel));
// }

// for (const grafica of angulo) {
//     rulesDataAng.push(grafica.fuzzify(ang));
// }


// console.log(velocidad, rulesDataVel);
// console.log(angulo, rulesDataAng);





